from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from app.core.config import settings
from app.db.database import SessionLocal
from app.db import models
from app.schemas import schemas
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class Bot:
    def __init__(self):
        self.app = None
        if settings.telegram_bot_token:
            self.app = Application.builder().token(settings.telegram_bot_token).build()

    async def initialize(self):
        if not self.app:
            return
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥

    async def start(self):
        if not self.app:
            return
        await self.app.initialize()
        await self.app.start()
        await self.app.update_bot_data({})

    async def stop(self):
        if not self.app:
            return
        await self.app.stop()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Vkusny Marshruty!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≥–æ—Ä—è—â–∏–µ –ø—É—Ç–µ–≤–∫–∏ –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —Ü–µ–Ω–∞–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        await update.message.reply_text(welcome_message)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/tours - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã\n"
            "/hot - –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        await update.message.reply_text(help_message)

    async def list_tours(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤"""
        db = SessionLocal()
        try:
            tours = db.query(models.Tour).all()
            if not tours:
                await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤.")
                return

            message = "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã:\n\n"
            for tour in tours:
                message += f"üìç {tour.title}\n"
                message += f"üèñ {tour.country}, {tour.city}\n"
                message += f"üí∞ –¶–µ–Ω–∞: {tour.price}‚ÇΩ (–±—ã–ª–æ {tour.original_price}‚ÇΩ)\n"
                message += f"üìÖ {tour.departure_date.strftime('%d.%m.%Y')} - {tour.return_date.strftime('%d.%m.%Y')}\n"
                message += f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {tour.available_spots}\n\n"

            await update.message.reply_text(message)
        finally:
            db.close()

    async def hot_tours(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        db = SessionLocal()
        try:
            tours = db.query(models.Tour).filter(models.Tour.is_hot == True).all()
            if not tours:
                await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –≥–æ—Ä—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
                return

            message = "üî• –ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
            for tour in tours:
                keyboard = [[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"tour_{tour.id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message = (
                    f"üìç {tour.title}\n"
                    f"üèñ {tour.country}, {tour.city}\n"
                    f"üí∞ –¶–µ–Ω–∞: {tour.price}‚ÇΩ (–±—ã–ª–æ {tour.original_price}‚ÇΩ)\n"
                    f"üìÖ {tour.departure_date.strftime('%d.%m.%Y')} - {tour.return_date.strftime('%d.%m.%Y')}\n"
                    f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {tour.available_spots}\n"
                )
                await update.message.reply_text(message, reply_markup=reply_markup)
        finally:
            db.close()

    async def tour_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        tour_id = int(query.data.split('_')[1])
        db = SessionLocal()
        try:
            tour = db.query(models.Tour).filter(models.Tour.id == tour_id).first()
            if not tour:
                await query.message.reply_text("–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            message = (
                f"üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ:\n\n"
                f"üìç {tour.title}\n"
                f"üèñ {tour.country}, {tour.city}\n"
                f"üí∞ –¶–µ–Ω–∞: {tour.price}‚ÇΩ (–±—ã–ª–æ {tour.original_price}‚ÇΩ)\n"
                f"üìÖ {tour.departure_date.strftime('%d.%m.%Y')} - {tour.return_date.strftime('%d.%m.%Y')}\n"
                f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {tour.available_spots}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{tour.description}"
            )

            keyboard = [[InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"request_{tour.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(message, reply_markup=reply_markup)
        finally:
            db.close()

    async def create_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç—É—Ä"""
        query = update.callback_query
        await query.answer()
        
        tour_id = int(query.data.split('_')[1])
        db = SessionLocal()
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text(
                "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )
        finally:
            db.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot() 