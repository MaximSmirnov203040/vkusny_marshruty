from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from sqlalchemy.orm import Session
from app.db.database import SessionLocal
from app.db import models
from app.schemas import schemas
from datetime import datetime
from app.bot.config import settings
import logging
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def format_datetime(value):
    if value is None:
        return ""
    if isinstance(value, datetime):
        return value.strftime("%d.%m.%Y %H:%M")
    return value

def format_price(value):
    if value is None:
        return ""
    return f"{value:,.2f} ‚ÇΩ".replace(",", " ")

class Bot:
    def __init__(self):
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        self.settings = settings
        self.setup_handlers()

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        logger.info(f"Checking admin rights for user_id: {user_id}")
        logger.info(f"Admin IDs from settings: {self.settings.ADMIN_IDS}")
        is_admin = user_id in self.settings.ADMIN_IDS
        logger.info(f"Is admin: {is_admin}")
        return is_admin

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("admin", self.admin_panel))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^admin_panel$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^list_tours$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^list_requests$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^create_tour$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^help$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^admin_tours$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^admin_requests$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern="^main_menu$"))
        self.application.add_handler(CallbackQueryHandler(self.handle_request_status, pattern="^status_\d+_[a-zA-Z]+$"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update.effective_user.id not in settings.ADMIN_IDS:
            await update.message.reply_text(
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤", callback_data="admin_tours")],
            [InlineKeyboardButton("üë• –ó–∞—è–≤–∫–∏", callback_data="admin_requests")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–∫—É—Å–Ω—ã—Ö –ú–∞—Ä—à—Ä—É—Ç–æ–≤!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=reply_markup
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if update.effective_user.id not in settings.ADMIN_IDS:
            await update.message.reply_text(
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/admin - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
        )
        await update.message.reply_text(help_text)

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤", callback_data="list_tours")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä", callback_data="create_tour")],
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="list_requests")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            message = update.callback_query.message
        else:
            message = update.message

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if 'admin_message_id' in context.user_data:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['admin_message_id'],
                    text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logging.error(f"Error updating admin panel: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await message.reply_text(
                    "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                context.user_data['admin_message_id'] = sent_message.message_id
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await message.reply_text(
                "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            context.user_data['admin_message_id'] = sent_message.message_id

    async def list_tours(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.settings.API_URL}/api/v1/tours/",
                    headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                )
                tours = response.json()

            if not tours:
                text = "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –ø—É—Å—Ç"
            else:
                text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤:\n\n"
                for tour in tours:
                    text += (
                        f"üè∑ {tour['title']}\n"
                        f"üí∞ –¶–µ–Ω–∞: {tour['price']} —Ä—É–±.\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tour['duration']} –¥–Ω–µ–π\n"
                        f"üìç –ú–µ—Å—Ç–æ: {tour['location']}\n"
                        f"üë• –ú–µ—Å—Ç: {tour['available_spots']}/{tour['max_participants']}\n"
                        f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {tour['departure_date']}\n"
                        f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {tour['return_date']}\n\n"
                    )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="list_tours")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if 'tours_message_id' in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['tours_message_id'],
                        text=text,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logging.error(f"Error updating tours list: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await update.callback_query.message.reply_text(
                        text,
                        reply_markup=reply_markup
                    )
                    context.user_data['tours_message_id'] = message.message_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await update.callback_query.message.reply_text(
                    text,
                    reply_markup=reply_markup
                )
                context.user_data['tours_message_id'] = message.message_id

        except Exception as e:
            logging.error(f"Error in list_tours: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"
            )

    async def list_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.settings.API_URL}/api/v1/requests/",
                    headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                )
                response.raise_for_status()
                requests = response.json()

            if not requests:
                text = "üìù –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç"
            else:
                text = "üìù –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
                for request in requests:
                    text += f"ID: {request['id']}\n"
                    text += f"–¢—É—Ä: {request.get('tour', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    text += f"–°—Ç–∞—Ç—É—Å: {request.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    
                    if request.get('user'):
                        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request['user'].get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    else:
                        text += (
                            f"–ì–æ—Å—Ç—å: {request.get('guest_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"Email: {request.get('guest_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {request.get('guest_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        )
                    
                    text += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    text += "-------------------\n"

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="list_requests")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
            if "last_bot_message_id" in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["last_bot_message_id"],
                        text=text,
                        reply_markup=reply_markup
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await update.effective_message.reply_text(
                        text=text,
                        reply_markup=reply_markup
                    )
                    context.user_data["last_bot_message_id"] = message.message_id
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                message = await update.effective_message.reply_text(
                    text=text,
                    reply_markup=reply_markup
                )
                context.user_data["last_bot_message_id"] = message.message_id

        except Exception as e:
            logger.error(f"Error listing requests: {e}")
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.effective_user.id not in settings.ADMIN_IDS:
            await update.message.reply_text(
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await update.message.delete()
        except Exception as e:
            logging.error(f"Error deleting user message: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ —Ç—É—Ä
        if context.user_data.get('creating_tour'):
            try:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞: {update.message.text}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                lines = update.message.text.split('\n')
                logging.info(f"–†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(lines)} —Å—Ç—Ä–æ–∫")
                
                if len(lines) < 10:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ª—É—á–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è 10")

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                title = lines[0].strip()
                description = lines[1].strip()
                price = float(lines[2].strip())
                duration = int(lines[3].strip())
                image_url = lines[4].strip()
                location = lines[5].strip()
                max_participants = int(lines[6].strip())
                available_spots = int(lines[7].strip())
                departure_date = datetime.strptime(lines[8].strip(), "%Y-%m-%d")
                return_date = datetime.strptime(lines[9].strip(), "%Y-%m-%d")

                logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω:")
                logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                logging.info(f"–¶–µ–Ω–∞: {price}")
                logging.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
                logging.info(f"–ú–µ—Å—Ç–æ: {location}")
                logging.info(f"–ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_participants}")
                logging.info(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {available_spots}")
                logging.info(f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_date}")
                logging.info(f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {return_date}")

                # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä —á–µ—Ä–µ–∑ API
                tour_data = {
                    "title": title,
                    "description": description,
                    "price": price,
                    "duration": duration,
                    "image_url": image_url,
                    "location": location,
                    "max_participants": max_participants,
                    "available_spots": available_spots,
                    "departure_date": departure_date.isoformat(),
                    "return_date": return_date.isoformat()
                }

                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {self.settings.API_URL}/api/v1/tours/")
                logging.info(f"–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞: {tour_data}")
                logging.info(f"API Token: {self.settings.API_TOKEN}")

                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"{self.settings.API_URL}/api/v1/tours/",
                        json=tour_data,
                        headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                    )

                logging.info(f"–û—Ç–≤–µ—Ç API: {response.status_code}")
                logging.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

                if response.status_code == 200:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    if 'create_tour_message_id' in context.user_data:
                        try:
                            await context.bot.edit_message_text(
                                chat_id=update.effective_chat.id,
                                message_id=context.user_data['create_tour_message_id'],
                                text="‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                                    f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n"
                                    f"–ú–µ—Å—Ç–æ: {location}"
                            )
                        except Exception as e:
                            logging.error(f"Error updating create tour message: {e}")
                    else:
                        message = await update.message.reply_text(
                            "‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                            f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n"
                            f"–ú–µ—Å—Ç–æ: {location}"
                        )
                        context.user_data['create_tour_message_id'] = message.message_id
                else:
                    error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}\n–û—Ç–≤–µ—Ç: {response.text}"
                    logging.error(error_message)
                    await update.message.reply_text(error_message)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞: {str(e)}"
                logging.error(error_message, exc_info=True)
                await update.message.reply_text(error_message)

            finally:
                context.user_data['creating_tour'] = False
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                await self.admin_panel(update, context)
                return

        # –ï—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—É—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self.admin_panel(update, context)

    async def handle_create_tour(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ\n"
            "–¶–µ–Ω–∞\n"
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –¥–Ω—è—Ö)\n"
            "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "–ú–µ—Å—Ç–æ\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞\n"
            "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (YYYY-MM-DD)\n"
            "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (YYYY-MM-DD)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–¢—É—Ä –ø–æ –ó–æ–ª–æ—Ç–æ–º—É –∫–æ–ª—å—Ü—É\n"
            "–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –¥—Ä–µ–≤–Ω–∏–º –≥–æ—Ä–æ–¥–∞–º\n"
            "50000\n"
            "7\n"
            "https://example.com/image.jpg\n"
            "–ú–æ—Å–∫–≤–∞\n"
            "20\n"
            "20\n"
            "2024-05-01\n"
            "2024-05-07"
        )
        context.user_data['creating_tour'] = True

    async def handle_tour_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞"""
        if not context.user_data.get('creating_tour'):
            return

        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = update.message.text.split('\n')
            if len(lines) < 10:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            title = lines[0].strip()
            description = lines[1].strip()
            price = float(lines[2].strip())
            duration = int(lines[3].strip())
            image_url = lines[4].strip()
            location = lines[5].strip()
            max_participants = int(lines[6].strip())
            available_spots = int(lines[7].strip())
            departure_date = datetime.strptime(lines[8].strip(), "%Y-%m-%d")
            return_date = datetime.strptime(lines[9].strip(), "%Y-%m-%d")

            # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä —á–µ—Ä–µ–∑ API
            tour_data = {
                "title": title,
                "description": description,
                "price": price,
                "duration": duration,
                "image_url": image_url,
                "location": location,
                "max_participants": max_participants,
                "available_spots": available_spots,
                "departure_date": departure_date.isoformat(),
                "return_date": return_date.isoformat()
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.settings.API_URL}/api/v1/tours/",
                    json=tour_data,
                    headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                )

            if response.status_code == 200:
                await update.message.reply_text(
                    "‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n"
                    f"–ú–µ—Å—Ç–æ: {location}"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )

        except Exception as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )

        finally:
            context.user_data['creating_tour'] = False
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            await self.handle_admin_panel(update, context)

    async def notify_admin_about_request(self, request_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            status_emoji = {
                "pending": "‚è≥",
                "approved": "‚úÖ",
                "rejected": "‚ùå",
                "cancelled": "üö´"
            }.get(request_data.get('status', 'pending'), "‚ùì")

            message = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
                f"ID: {request_data.get('id')}\n"
                f"–¢—É—Ä: {request_data.get('tour', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {request_data.get('status', 'pending')}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {request_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            )

            if request_data.get('user'):
                message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request_data['user'].get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            else:
                message += (
                    f"–ì–æ—Å—Ç—å:\n"
                    f"–ò–º—è: {request_data.get('guest_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"Email: {request_data.get('guest_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('guest_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                )

            if request_data.get('comment'):
                message += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request_data['comment']}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
            keyboard = []
            for new_status in ["approved", "rejected", "cancelled"]:
                keyboard.append([
                    InlineKeyboardButton(
                        f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {new_status}",
                        callback_data=f"status_{request_data['id']}_{new_status}"
                    )
                ])
            keyboard.append([InlineKeyboardButton("üìù –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in self.settings.ADMIN_IDS:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç
                    try:
                        chat = await self.application.bot.get_chat(admin_id)
                        if chat:
                            try:
                                await self.application.bot.send_message(
                                    chat_id=admin_id,
                                    text=message,
                                    reply_markup=reply_markup
                                )
                            except Exception as e:
                                logger.error(f"Error sending message to admin {admin_id}: {e}")
                                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                                try:
                                    await self.application.bot.send_message(
                                        chat_id=admin_id,
                                        text=message
                                    )
                                except Exception as e2:
                                    logger.error(f"Error sending plain message to admin {admin_id}: {e2}")
                    except Exception as e:
                        logger.error(f"Error checking chat for admin {admin_id}: {e}")
                        continue
                except Exception as e:
                    logger.error(f"Error processing admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Error in notify_admin_about_request: {e}")

    async def handle_request_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.from_user.id not in settings.ADMIN_IDS:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
            return

        _, request_id, new_status = query.data.split("_")
        request_id = int(request_id)

        try:
            async with httpx.AsyncClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                response = await client.get(
                    f"{self.settings.API_URL}/api/v1/requests/{request_id}",
                    headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                )
                response.raise_for_status()
                request_data = response.json()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                response = await client.patch(
                    f"{self.settings.API_URL}/api/v1/requests/{request_id}",
                    json={"status": new_status},
                    headers={"Authorization": f"Bearer {self.settings.API_TOKEN}"}
                )
                response.raise_for_status()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    "pending": "‚è≥",
                    "approved": "‚úÖ",
                    "rejected": "‚ùå",
                    "cancelled": "üö´"
                }.get(new_status, "‚ùì")

                await query.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_emoji} {new_status}"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
                await self.list_requests(update, context)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                await self.notify_admin_about_request(request_data)

        except Exception as e:
            logger.error(f"Error updating request status: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"
            )

    async def delete_previous_category_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if "last_category_message_ids" in context.user_data:
            for message_id in context.user_data["last_category_message_ids"]:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=message_id
                    )
                except Exception as e:
                    logger.error(f"Error deleting message {message_id}: {e}")
            context.user_data["last_category_message_ids"] = []

    async def handle_admin_tours(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()

        if not self.is_admin(query.from_user.id):
            await query.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await self.delete_previous_category_messages(update, context)

        db = SessionLocal()
        try:
            tours = db.query(models.Tour).all()
            if not tours:
                await query.message.reply_text("–¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            message_ids = []
            for tour in tours:
                message = (
                    f"üìã –¢—É—Ä #{tour.id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {tour.title}\n"
                    f"–¶–µ–Ω–∞: {format_price(tour.price)}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tour.duration} –¥–Ω–µ–π\n"
                    f"–ú–µ—Å—Ç–æ: {tour.location}\n"
                    f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {tour.available_spots}/{tour.max_participants}\n"
                    f"{'üî• –ì–æ—Ä—è—â–∏–π —Ç—É—Ä' if tour.is_hot else ''}\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{tour.description}\n"
                )

                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"tour_status_{tour.id}")],
                    [InlineKeyboardButton("üìã –í—Å–µ —Ç—É—Ä—ã", callback_data="admin_tours")],
                    [InlineKeyboardButton("üë• –ó–∞—è–≤–∫–∏", callback_data="admin_requests")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                sent_message = await query.message.reply_text(message, reply_markup=reply_markup)
                message_ids.append(sent_message.message_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            context.user_data["last_category_message_ids"] = message_ids

        finally:
            db.close()

    async def handle_admin_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await self.delete_previous_category_messages(update, context)

        db = SessionLocal()
        try:
            requests = db.query(models.TravelRequest).all()
            if not requests:
                await query.message.reply_text("–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            message_ids = []
            for request in requests:
                status_emoji = {
                    "pending": "‚è≥",
                    "approved": "‚úÖ",
                    "rejected": "‚ùå",
                    "cancelled": "üö´"
                }.get(request.status, "‚ùì")

                message = (
                    f"üë• –ó–∞—è–≤–∫–∞ #{request.id}\n"
                    f"–¢—É—Ä: {request.tour.title}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_emoji} {request.status}\n"
                    f"–î–∞—Ç–∞: {format_datetime(request.created_at)}\n"
                )

                if request.user_id:
                    message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user.username}\n"
                else:
                    message += (
                        f"–ì–æ—Å—Ç—å: {request.guest_name}\n"
                        f"Email: {request.guest_email}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {request.guest_phone}\n"
                    )

                if request.comment:
                    message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.comment}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
                keyboard = []
                for new_status in ["pending", "approved", "rejected", "cancelled"]:
                    if new_status != request.status:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {new_status}",
                                callback_data=f"status_{request.id}_{new_status}"
                            )
                        ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                keyboard.extend([
                    [InlineKeyboardButton("üìã –í—Å–µ —Ç—É—Ä—ã", callback_data="admin_tours")],
                    [InlineKeyboardButton("üë• –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests")]
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                sent_message = await query.message.reply_text(message, reply_markup=reply_markup)
                message_ids.append(sent_message.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            context.user_data["last_category_message_ids"] = message_ids

        finally:
            db.close()

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        if not self.is_admin(query.from_user.id):
            await query.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await self.delete_previous_category_messages(update, context)

        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤", callback_data="admin_tours")],
            [InlineKeyboardButton("üë• –ó–∞—è–≤–∫–∏", callback_data="admin_requests")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        sent_message = await query.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–∫—É—Å–Ω—ã—Ö –ú–∞—Ä—à—Ä—É—Ç–æ–≤!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=reply_markup
        )
        context.user_data["last_category_message_ids"] = [sent_message.message_id]

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()

        if query.from_user.id not in settings.ADMIN_IDS:
            await query.message.reply_text(
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback_data
        if query.data == "admin_panel":
            await self.admin_panel(update, context)
        elif query.data == "list_tours":
            await self.list_tours(update, context)
        elif query.data == "list_requests":
            await self.list_requests(update, context)
        elif query.data == "create_tour":
            await self.create_tour(update, context)
        elif query.data == "help":
            await self.help(update, context)
        elif query.data == "admin_tours":
            await self.handle_admin_tours(update, context)
        elif query.data == "admin_requests":
            await self.handle_admin_requests(update, context)
        elif query.data == "main_menu":
            await self.handle_main_menu(update, context)
        elif query.data.startswith("status_"):
            await self.handle_request_status(update, context)
        else:
            await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling() 